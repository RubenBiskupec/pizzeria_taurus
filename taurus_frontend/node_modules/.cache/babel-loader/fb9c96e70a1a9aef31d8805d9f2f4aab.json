{"ast":null,"code":"import _asyncToGenerator from \"/home/ruben/Documents/tech-web/pizzeria-taurus/taurus_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nimport { HttpService } from \"@/services/HttpService\";\nvar httpService = new HttpService();\nexport default new Vuex.Store({\n  state: {\n    ingredients: [],\n    pizzaTypes: [],\n    sizes: [],\n    doughs: [],\n    menuPizzas: [],\n    beverages: [],\n    isAuthenticated: false,\n    token: ''\n  },\n  getters: {\n    ingredients: function ingredients(state) {\n      return state.ingredients;\n    },\n    availableIngredients: function availableIngredients(state) {\n      return state.ingredients.filter(function (ingredient) {\n        return ingredient.is_in_stock;\n      });\n    },\n    pizzaTypes: function pizzaTypes(state) {\n      return state.pizzaTypes;\n    },\n    sizes: function sizes(state) {\n      return state.sizes;\n    },\n    doughs: function doughs(state) {\n      return state.doughs;\n    },\n    availableDoughs: function availableDoughs(state) {\n      return state.doughs.filter(function (dough) {\n        return dough.is_in_stock;\n      });\n    },\n    menuPizzas: function menuPizzas(state) {\n      return state.menuPizzas;\n    },\n    availableMenuPizzas: function availableMenuPizzas(state) {\n      var availableMenuPizzas = [];\n\n      for (var menuPizza in state.menuPizzas) {}\n    },\n    beverages: function beverages(state) {\n      return state.beverages;\n    },\n    availableBeverages: function availableBeverages(state) {\n      return state.beverages.filter(function (beverage) {\n        return beverage.is_in_stock;\n      });\n    }\n  },\n  mutations: {\n    initialize: function initialize(state) {},\n    SET_INGREDIENTS: function SET_INGREDIENTS(state, ingredients) {\n      state.ingredients = ingredients;\n    },\n    SET_PIZZA_TYPES: function SET_PIZZA_TYPES(state, pizzaTypes) {\n      state.pizzaTypes = pizzaTypes;\n    },\n    SET_SIZES: function SET_SIZES(state, sizes) {\n      state.sizes = sizes;\n    },\n    SET_DOUGHS: function SET_DOUGHS(state, doughs) {\n      state.doughs = doughs;\n    },\n    SET_MENU_PIZZAS: function SET_MENU_PIZZAS(state, menuPizzas) {\n      state.menuPizzas = menuPizzas;\n    },\n    SET_BEVERAGES: function SET_BEVERAGES(state, beverages) {\n      state.beverages = beverages;\n    }\n  },\n  actions: {\n    fetchIngredients: function fetchIngredients(_ref) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var commit, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit;\n                _context.next = 3;\n                return httpService.getMenuEntity(\"Ingredient\");\n\n              case 3:\n                data = _context.sent;\n                commit('SET_INGREDIENTS', data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    fetchPizzaTypes: function fetchPizzaTypes(_ref2) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var commit, data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref2.commit;\n                _context2.next = 3;\n                return httpService.getMenuEntity(\"PizzaType\");\n\n              case 3:\n                data = _context2.sent;\n                commit('SET_PIZZA_TYPES', data);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    fetchSizes: function fetchSizes(_ref3) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var commit, data;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref3.commit;\n                _context3.next = 3;\n                return httpService.getMenuEntity(\"Size\");\n\n              case 3:\n                data = _context3.sent;\n                commit('SET_SIZES', data);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    fetchDoughs: function fetchDoughs(_ref4) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var commit, data;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref4.commit;\n                _context4.next = 3;\n                return httpService.getMenuEntity(\"Dough\");\n\n              case 3:\n                data = _context4.sent;\n                commit('SET_DOUGHS', data);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    fetchMenuPizzas: function fetchMenuPizzas(_ref5) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var commit, data;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                commit = _ref5.commit;\n                _context5.next = 3;\n                return httpService.getMenuEntity(\"MenuPizza\");\n\n              case 3:\n                data = _context5.sent;\n                commit('SET_MENU_PIZZAS', data);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n    fetchBeverages: function fetchBeverages(_ref6) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var commit, data;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                commit = _ref6.commit;\n                _context6.next = 3;\n                return httpService.getMenuEntity(\"Beverage\");\n\n              case 3:\n                data = _context6.sent;\n                commit('SET_BEVERAGES', data);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    }\n  },\n  modules: {}\n});","map":{"version":3,"sources":["/home/ruben/Documents/tech-web/pizzeria-taurus/taurus_frontend/src/store/index.js"],"names":["Vue","Vuex","use","HttpService","httpService","Store","state","ingredients","pizzaTypes","sizes","doughs","menuPizzas","beverages","isAuthenticated","token","getters","availableIngredients","filter","ingredient","is_in_stock","availableDoughs","dough","availableMenuPizzas","menuPizza","availableBeverages","beverage","mutations","initialize","SET_INGREDIENTS","SET_PIZZA_TYPES","SET_SIZES","SET_DOUGHS","SET_MENU_PIZZAS","SET_BEVERAGES","actions","fetchIngredients","commit","getMenuEntity","data","fetchPizzaTypes","fetchSizes","fetchDoughs","fetchMenuPizzas","fetchBeverages","modules"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\nimport { HttpService } from \"@/services/HttpService\";\n\nconst httpService = new HttpService();\n\nexport default new Vuex.Store({\n  state: {\n    ingredients: [],\n    pizzaTypes: [],\n    sizes: [],\n    doughs: [],\n    menuPizzas: [],\n    beverages: [],\n    isAuthenticated: false,\n    token: '',\n  },\n  getters: {\n    ingredients(state) {\n      return state.ingredients;\n    },\n    availableIngredients(state) {\n      return state.ingredients.filter(ingredient => ingredient.is_in_stock);\n    },\n    pizzaTypes(state) {\n      return state.pizzaTypes;\n    },\n    sizes(state) {\n      return state.sizes;\n    },\n    doughs(state) {\n      return state.doughs;\n    },\n    availableDoughs(state) {\n      return state.doughs.filter(dough => dough.is_in_stock);\n    },\n    menuPizzas(state) {\n      return state.menuPizzas;\n    },\n    availableMenuPizzas(state) {\n      let availableMenuPizzas = []\n      for (let menuPizza in state.menuPizzas) {\n\n      }\n    },\n    beverages(state) {\n      return state.beverages;\n    },\n    availableBeverages(state) {\n      return state.beverages.filter(beverage => beverage.is_in_stock);\n    }\n  },\n  mutations: {\n    initialize(state) {\n\n    },\n    SET_INGREDIENTS(state, ingredients) {\n      state.ingredients = ingredients;\n    },\n    SET_PIZZA_TYPES(state, pizzaTypes) {\n      state.pizzaTypes = pizzaTypes;\n    },\n    SET_SIZES(state, sizes) {\n      state.sizes = sizes;\n    },\n    SET_DOUGHS(state, doughs) {\n      state.doughs = doughs;\n    },\n    SET_MENU_PIZZAS(state, menuPizzas) {\n      state.menuPizzas = menuPizzas;\n    },\n    SET_BEVERAGES(state, beverages) {\n      state.beverages = beverages;\n    }\n  },\n  actions: {\n    async fetchIngredients({commit}) {\n      const data = await httpService.getMenuEntity(\"Ingredient\");\n      commit('SET_INGREDIENTS', data);\n    },\n    async fetchPizzaTypes({commit}) {\n      const data = await httpService.getMenuEntity(\"PizzaType\");\n      commit('SET_PIZZA_TYPES', data);\n    },\n    async fetchSizes({commit}) {\n      const data = await httpService.getMenuEntity(\"Size\");\n      commit('SET_SIZES', data);\n    },\n    async fetchDoughs({commit}) {\n      const data = await httpService.getMenuEntity(\"Dough\");\n      commit('SET_DOUGHS', data);\n    },\n    async fetchMenuPizzas({commit}) {\n      const data = await httpService.getMenuEntity(\"MenuPizza\");\n      commit('SET_MENU_PIZZAS', data);\n    },\n    async fetchBeverages({commit}) {\n      const data = await httpService.getMenuEntity(\"Beverage\");\n      commit('SET_BEVERAGES', data);\n    }\n\n  },\n  modules: {\n  }\n})\n"]},"metadata":{},"sourceType":"module"}